import logging
import os
import sys
import time

import pandas as pd
import xlwings as xw

from funcs.ios import save_dataframe_to_excel
from funcs.tide import get_date_str_today

# Windows Âõ∫Êúâ„ÅÆ„É©„Ç§„Éñ„É©„É™
if sys.platform == "win32":
    from pywintypes import com_error

from PySide6.QtCore import QObject, QThread, Signal

from structs.res import AppRes


class StockCollectorWorker(QObject):
    # ÈäòÊüÑÂêçÔºà„É™„Çπ„ÉàÔºâ„ÅÆÈÄöÁü•
    notifyTickerN = Signal(list, dict)
    # ‰øùÂ≠ò„ÅÆÁµÇ‰∫Ü„ÇíÈÄöÁü•
    saveCompleted = Signal(bool)
    # „Çπ„É¨„ÉÉ„Éâ„ÅÆÁµÇ‰∫Ü„ÇíÈÄöÁü•
    threadFinished = Signal()

    def __init__(self, res: AppRes, excel_path: str):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.res = res
        self.excel_path = excel_path

        # ---------------------------------------------------------------------
        # xlwings „ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
        # „Åì„ÅÆÂàùÊúüÂåñ„Éó„É≠„Çª„Çπ„Åß„ÅØ xlwings „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂàùÊúüÂåñ„Åå„Åß„Åç„Å™„ÅÑ„ÄÇ
        # Excel „Å®ÈÄö‰ø°„Åô„Çã COM „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åå„Çπ„É¨„ÉÉ„Éâ„Ç¢„Éï„Ç£„Éã„ÉÜ„Ç£ÔºàÁâπÂÆö„ÅÆCOM„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅØ
        # ÁâπÂÆö„ÅÆ„Ç∑„É≥„Ç∞„É´„Çπ„É¨„ÉÉ„Éâ„Ç¢„Éë„Éº„Éà„É°„É≥„Éà„Åß„Åó„ÅãÂãï‰Ωú„Åß„Åç„Å™„ÅÑ„Å®„ÅÑ„ÅÜÂà∂Á¥ÑÔºâ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Çã„Åü„ÇÅ
        # ---------------------------------------------------------------------
        self.wb = None  # Excel „ÅÆ„ÉØ„Éº„ÇØ„Éñ„ÉÉ„ÇØ„Ç§„É≥„Çπ„Çø„É≥„Çπ
        self.sheet = None  # Excel „ÅÆ„ÉØ„Éº„ÇØ„Ç∑„Éº„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ

        # Excel„Ç∑„Éº„Éà„Åã„Çâ xlwings „Åß„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ„Å®„Åç„ÅÆË©¶Ë°åÂõûÊï∞
        # Ê•ΩÂ§©Ë®ºÂà∏„ÅÆ„Éû„Éº„Ç±„ÉÉ„Éà„Çπ„Éî„Éº„ÉâÔºí RSS „ÅÆÊõ∏Ëæº„Å®Èáç„Å™„ÇãÔºàË°ùÁ™Å„Åô„ÇãÔºâ„Å®„ÄÅ
        # COM „Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Çã„Åü„ÇÅ„ÄÅ„É™„Éà„É©„Ç§„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Å¶„ÅÑ„Çã„ÄÇ
        self.max_retries = 3  # ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞
        self.retry_delay = 0.1  # „É™„Éà„É©„Ç§Èñì„ÅÆÈÅÖÂª∂ÔºàÁßíÔºâ
        # ---------------------------------------------------------------------

        # Excel „ÉØ„Éº„ÇØ„Ç∑„Éº„ÉàÊÉÖÂ†±
        self.cell_bottom = "------"
        self.list_ticker = list()  # ÈäòÊüÑ„É™„Çπ„Éà
        self.dict_row = dict()  # ÈäòÊüÑ„ÅÆË°å‰ΩçÁΩÆ
        self.dict_name = dict()  # ÈäòÊüÑÂêç
        self.dict_df = dict()  # ÈäòÊüÑÂà•„Éá„Éº„Çø„Éï„É¨„Éº„É†

        # Excel „ÅÆÂàóÊÉÖÂ†±
        self.col_code = 0  # ÈäòÊüÑ„Ç≥„Éº„Éâ
        self.col_name = 1  # ÈäòÊüÑÂêç
        self.col_date = 2  # Êó•‰ªò
        self.col_time = 3  # ÊôÇÂàª
        self.col_price = 4  # ÁèæÂú®Ë©≥Á¥∞Ê†™‰æ°
        self.col_lastclose = 5  # ÂâçÊó•ÁµÇÂÄ§
        self.col_ratio = 6  # ÂâçÊó•ÊØî
        self.col_volume = 7  # Âá∫Êù•È´ò

    def initWorker(self):
        self.logger.info("Worker: in init process.")
        #######################################################################
        # ÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã Excel „ÉØ„Éº„ÇØ„Éñ„ÉÉ„ÇØ„Éª„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÁîüÊàê
        self.wb = wb = xw.Book(self.excel_path)
        name_sheet = "Cover"
        self.sheet = wb.sheets[name_sheet]
        #
        #######################################################################

        row = 1
        flag_loop = True
        while flag_loop:
            ticker = self.sheet[row, self.col_code].value
            if ticker == self.cell_bottom:
                flag_loop = False
            else:
                # ÈäòÊüÑ„Ç≥„Éº„Éâ
                self.list_ticker.append(ticker)

                # Ë°å‰ΩçÁΩÆ
                self.dict_row[ticker] = row

                # ÈäòÊüÑÂêç
                self.dict_name[ticker] = self.sheet[row, self.col_name].value

                # ÈäòÊüÑÂà•„Å´Á©∫„ÅÆ„Éá„Éº„Çø„Éï„É¨„Éº„É†„ÇíÊ∫ñÂÇô
                self.dict_df[ticker] = pd.DataFrame({
                    "Time": list(),
                    "Price": list(),
                    "Volume": list(),
                })

                # Ë°åÁï™Âè∑„ÅÆ„Ç§„É≥„ÇØ„É™„É°„É≥„Éà
                row += 1

        # --------------------------------------------------------------
        # üßø ÈäòÊüÑÂêç„Å™„Å©„ÅÆÊÉÖÂ†±„ÇíÈÄöÁü•
        self.notifyTickerN.emit(self.list_ticker, self.dict_name)
        # --------------------------------------------------------------

    def readCurrentPrice(self):
        for ticker in self.list_ticker:
            row_excel = self.dict_row[ticker]
            df = self.dict_df[ticker]
            row = len(df)
            # Excel „Ç∑„Éº„Éà„Åã„ÇâÊ†™‰æ°ÊÉÖÂ†±„ÇíÂèñÂæó
            for attempt in range(self.max_retries):
                ###############################################################
                # Ê•ΩÂ§©Ë®ºÂà∏„ÅÆ„Éû„Éº„Ç±„ÉÉ„Éà„Çπ„Éî„Éº„ÉâÔºí RSS „ÅÆÊõ∏Ëæº„Å®Èáç„Å™„ÇãÔºàË°ùÁ™Å„Åô„ÇãÔºâ„Å®„ÄÅ
                # COM „Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Çã„Åü„ÇÅ„ÄÅ„É™„Éà„É©„Ç§„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Å¶„ÅÑ„Çã„ÄÇ
                # -------------------------------------------------------------
                try:
                    ts = time.time()
                    # Excel„Ç∑„Éº„Éà„Åã„ÇâÊ†™‰æ°„Éá„Éº„Çø„ÇíÂèñÂæó
                    price = self.sheet[row_excel, self.col_price].value
                    volume = self.sheet[row_excel, self.col_volume].value
                    if price > 0:
                        # „Åì„Åì„Åß„ÇÇ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÇíÊôÇÂàª„Å´Êé°Áî®„Åô„Çã
                        df.at[row, "Time"] = ts
                        df.at[row, "Price"] = price
                        df.at[row, "Volume"] = volume
                        # print(ticker, ts, price)
                    break
                except com_error as e:
                    # ---------------------------------------------------------
                    # com_error „ÅØ Windows Âõ∫Êúâ
                    # ---------------------------------------------------------
                    if attempt < self.max_retries - 1:
                        self.logger.warning(
                            f"{__name__} COM error occurred, retrying... (Attempt {attempt + 1}/{self.max_retries}) Error: {e}"
                        )
                        time.sleep(self.retry_delay)
                    else:
                        self.logger.error(
                            f"{__name__} COM error occurred after {self.max_retries} attempts. Giving up."
                        )
                        raise  # ÊúÄÁµÇÁöÑ„Å´Â§±Êïó„Åó„Åü„Çâ‰æãÂ§ñ„ÇíÂÜçÁô∫Áîü„Åï„Åõ„Çã
                except Exception as e:
                    self.logger.exception(f"{__name__} an unexpected error occurred: {e}")
                    raise  # „Åù„ÅÆ‰ªñ„ÅÆ‰æãÂ§ñ„ÅØ„Åù„ÅÆ„Åæ„ÅæÁô∫Áîü„Åï„Åõ„Çã
                #
                ###############################################################

    def saveDataFrame(self):
        # ‰øùÂ≠ò„Åô„Çã„Éï„Ç°„Ç§„É´Âêç
        date_str = get_date_str_today()
        name_excel = os.path.join(
            self.res.dir_collection,
            f"ticks_{date_str}.xlsx"
        )
        # Âøµ„ÅÆ„Åü„ÇÅ„ÄÅÁ©∫„ÅÆ„Éá„Éº„Çø„Åß„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Åó„Å¶Á©∫„Åß„Å™„Åë„Çå„Å∞‰øùÂ≠ò
        r = 0
        for ticker in self.list_ticker:
            df = self.dict_df[ticker]
            r += len(df)
        if r == 0:
            # „Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„Éï„É¨„Éº„É†„ÅÆË°åÊï∞„Åå 0 „ÅÆÂ†¥Âêà„ÅØ‰øùÂ≠ò„Åó„Å™„ÅÑ„ÄÇ
            self.logger.info(f"{__name__} „Éá„Éº„Çø„ÅåÁÑ°„ÅÑ„Åü„ÇÅ {name_excel} „Å∏„ÅÆ‰øùÂ≠ò„ÅØ„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
            flag = False
        else:
            # „ÉÜ„Ç£„ÉÉ„ÇØ„Éá„Éº„Çø„ÅÆ‰øùÂ≠òÂá¶ÁêÜ
            try:
                save_dataframe_to_excel(name_excel, self.dict_df)
                self.logger.info(f"{__name__} „Éá„Éº„Çø„Åå {name_excel} „Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
                flag = True
            except ValueError as e:
                self.logger.error(f"{__name__} error occurred!: {e}")
                flag = False

        # ----------------------------
        # üßø ‰øùÂ≠ò„ÅÆÁµÇ‰∫Ü„ÇíÈÄöÁü•
        self.saveCompleted.emit(flag)
        # ----------------------------

    def stopProcess(self):
        """
        xlwings „ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÊòéÁ§∫ÁöÑ„Å´ÈñãÊîæ„Åô„Çã
        :return:
        """
        self.logger.info("Worker: stopProcess called.")

        if self.wb:
            """
            try:
                self.wb.close()  # „Éñ„ÉÉ„ÇØ„ÇíÈñâ„Åò„Çã
                self.logger.info("Worker: Excel book closed.")
            except Exception as e:
                self.logger.error(f"Worker: Error closing book: {e}")
            # „Éñ„ÉÉ„ÇØ„ÇíÈñâ„Åò„ÅüÂæå„ÄÅ„Åù„ÅÆË¶™„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇÇÁµÇ‰∫Ü„Åï„Åõ„Çã
            if self.wb.app:
                try:
                    self.wb.app.quit()
                    self.logger.info("Worker: Excel app quit.")
                except Exception as e:
                    self.logger.error(f"Worker: Error quitting app: {e}")
            """
            self.wb = None  # „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÂèÇÁÖß„Çí„ÇØ„É™„Ç¢

        # -------------------------------
        # üßø „Çπ„É¨„ÉÉ„ÉâÁµÇ‰∫Ü„Ç∑„Ç∞„Éä„É´„ÅÆÈÄöÁü•
        self.threadFinished.emit()
        # -------------------------------


class StockCollector(QThread):
    requestWorkerInit = Signal()
    requestCurrentPrice = Signal()
    requestSaveDataFrame = Signal()
    requestStopProcess = Signal()

    # „Åì„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÅåÈñãÂßã„Åï„Çå„Åü„Åì„Å®„ÇíÈÄöÁü•„Åô„Çã„Ç∑„Ç∞„Éä„É´Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®„Å™„Å©Ôºâ
    threadReady = Signal()

    def __init__(self, res: AppRes):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.res = res

        excel_path = res.excel_collector
        self.worker = worker = StockCollectorWorker(res, excel_path)
        self.worker.moveToThread(self)  # ThreadStockCollectorWorker„Çí„Åì„ÅÆQThread„Å´ÁßªÂãï

        # QThread „ÅåÈñãÂßã„Åï„Çå„Åü„Çâ„ÄÅ„ÉØ„Éº„Ç´„Éº„Çπ„É¨„ÉÉ„ÉâÂÜÖ„ÅßÂàùÊúüÂåñÂá¶ÁêÜ„ÇíÈñãÂßã„Åô„Çã„Ç∑„Ç∞„Éä„É´„ÇíÁô∫Ë°å
        self.started.connect(self.requestWorkerInit.emit)

        # „Çπ„É¨„ÉÉ„ÉâÈñãÂßãÊôÇ„Å´worker„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü„ÇíÈÄöÁü• (ÂøÖË¶Å„Åß„ÅÇ„Çå„Å∞)
        self.started.connect(self.thread_ready)

        # _____________________________________________________________________
        # „É°„Ç§„É≥„Éª„Çπ„É¨„ÉÉ„ÉâÂÅ¥„ÅÆ„Ç∑„Ç∞„Éä„É´„Å®„ÉØ„Éº„Ç´„Éº„Éª„Çπ„É¨„ÉÉ„ÉâÂÅ¥„ÅÆ„Çπ„É≠„ÉÉ„ÉàÔºà„É°„ÇΩ„ÉÉ„ÉâÔºâ„ÅÆÊé•Á∂ö
        # ÂàùÊúüÂåñÂá¶ÁêÜ„ÅØÊåáÂÆö„Åï„Çå„Åü Excel „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ„Åì„Å®
        # xlwings „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÁîüÊàê„ÄÅExcel „ÅÆÈäòÊüÑÊÉÖÂ†±„ÇíË™≠Ëæº„ÇÄ„É°„ÇΩ„ÉÉ„Éâ„Å∏„Ç≠„É•„Éº„Ç§„É≥„Ç∞„ÄÇ
        self.requestWorkerInit.connect(worker.initWorker)

        # ÁèæÂú®Ê†™‰æ°„ÇíÂèñÂæó„Åô„Çã„É°„ÇΩ„ÉÉ„Éâ„Å∏„Ç≠„É•„Éº„Ç§„É≥„Ç∞„ÄÇ
        self.requestCurrentPrice.connect(worker.readCurrentPrice)

        # „Éá„Éº„Çø„Éï„É¨„Éº„É†„Çí‰øùÂ≠ò„Åô„Çã„É°„ÇΩ„ÉÉ„Éâ„Å∏„Ç≠„É•„Éº„Ç§„É≥„Ç∞
        self.requestSaveDataFrame.connect(worker.saveDataFrame)

        # xlwings „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÁ†¥Ê£Ñ„ÄÅ„Çπ„É¨„ÉÉ„Éâ„ÇíÁµÇ‰∫Ü„Åô„Çã‰∏ãË®ò„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„Å∏„Ç≠„É•„Éº„Ç§„É≥„Ç∞„ÄÇ
        self.requestStopProcess.connect(worker.stopProcess)

        # „Çπ„É¨„ÉÉ„ÉâÁµÇ‰∫ÜÈñ¢ÈÄ£
        # worker.threadFinished.connect(self.on_thread_finished)
        worker.threadFinished.connect(self.quit)
        self.finished.connect(worker.deleteLater)
        self.finished.connect(self.deleteLater)

    def thread_ready(self):
        self.threadReady.emit()

    def run(self):
        """
        „Åì„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÅÆ„Ç§„Éô„É≥„Éà„É´„Éº„Éó„ÇíÈñãÂßã„Åô„Çã„ÄÇ
        „Åì„Çå„Åå„Å™„Åë„Çå„Å∞„ÄÅ„Çπ„É¨„ÉÉ„Éâ„ÅØ„Åô„Åê„Å´ÁµÇ‰∫Ü„Åó„Å¶„Åó„Åæ„ÅÜ„ÄÇ
        """
        self.logger.info(
            f"{__name__} StockCollector: run() method started. Entering event loop..."
        )
        self.exec()  # „Ç§„Éô„É≥„Éà„É´„Éº„Éó„ÇíÈñãÂßã
        self.logger.info(
            f"{__name__} StockCollector: run() method finished. Event loop exited."
        )
